#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef JIUFOUNDATION_SWIFT_H
#define JIUFOUNDATION_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="JiuFoundation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13JiuFoundation7AppInfo")
@interface AppInfo : NSObject
/// 获取当前的 App 版本号
///
/// returns:
/// 当前的 App 版本号，如“1.2.3”
+ (NSString * _Nonnull)appVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSAttributedString;
@class NSMutableAttributedString;

/// A simple wrapper for <code>NSAttributedString</code>.
/// <ul>
///   <li>
///     See: <a href="https://developer.apple.com/documentation/foundation/nsattributedstring/key">NSAttributedString.Key</a> .
///   </li>
/// </ul>
SWIFT_CLASS("_TtC13JiuFoundation17AttributedBuilder")
@interface AttributedBuilder : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nullable instancetype)initWithAny:(NSString * _Nullable)string;
- (AttributedBuilder * _Nonnull)setAttributeWithKey:(NSAttributedStringKey _Nonnull)key value:(id _Nullable)value;
- (AttributedBuilder * _Nonnull)appendWithOther:(NSAttributedString * _Nonnull)other SWIFT_DEPRECATED_MSG("", "appendAttributedString:");
- (AttributedBuilder * _Nonnull)appendString:(NSString * _Nonnull)value;
- (AttributedBuilder * _Nonnull)appendAttributedString:(NSAttributedString * _Nonnull)attributedString;
- (AttributedBuilder * _Nonnull)append:(AttributedBuilder * _Nonnull)other;
- (NSMutableAttributedString * _Nonnull)done SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "build");
- (NSAttributedString * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSMutableAttributedString * _Nonnull)buildString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (AttributedBuilder * _Nonnull)copyWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (AttributedBuilder * _Nonnull)template SWIFT_WARN_UNUSED_RESULT;
@end

@class NSTextAttachment;
@class UIColor;
@class UIFont;
enum LigatureLevel : NSInteger;
@class NSURL;
@class NSParagraphStyle;
@class NSShadow;

@interface AttributedBuilder (SWIFT_EXTENSION(JiuFoundation))
- (AttributedBuilder * _Nonnull)attachment:(NSTextAttachment * _Nonnull)value;
- (AttributedBuilder * _Nonnull)backgroundColor:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)backgroundColorWithHex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)baselineOffset:(double)value;
- (AttributedBuilder * _Nonnull)expansion:(double)value;
- (AttributedBuilder * _Nonnull)font:(UIFont * _Nonnull)value;
- (AttributedBuilder * _Nonnull)systemFont:(CGFloat)size;
- (AttributedBuilder * _Nonnull)systemFont:(CGFloat)size weight:(UIFontWeight)weight;
- (AttributedBuilder * _Nonnull)color:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)colorWithHex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)kern:(double)value;
- (AttributedBuilder * _Nonnull)ligature:(enum LigatureLevel)value;
- (AttributedBuilder * _Nonnull)linkWithUrl:(NSURL * _Nonnull)url;
- (AttributedBuilder * _Nonnull)link:(NSString * _Nonnull)value;
- (AttributedBuilder * _Nonnull)obliqueness:(double)value;
- (AttributedBuilder * _Nonnull)paragraphStyle:(NSParagraphStyle * _Nonnull)value;
- (AttributedBuilder * _Nonnull)shadow:(NSShadow * _Nonnull)value;
- (AttributedBuilder * _Nonnull)shadowWithOffset:(CGSize)offset radius:(CGFloat)radius color:(UIColor * _Nonnull)color;
- (AttributedBuilder * _Nonnull)shadowWithAlpha:(CGFloat)alpha blur:(CGFloat)blur x:(CGFloat)x y:(CGFloat)y color:(UIColor * _Nonnull)color;
- (AttributedBuilder * _Nonnull)shadowWithAlpha:(CGFloat)alpha blur:(CGFloat)blur x:(CGFloat)x y:(CGFloat)y hex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)strikethroughStyle:(NSUnderlineStyle)value;
- (AttributedBuilder * _Nonnull)strikethroughColor:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)strikethroughColorWithHex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)strokeColor:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)strokeColorWithArgb:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)strokeWidth:(double)value;
- (AttributedBuilder * _Nonnull)textEffect:(NSTextEffectStyle _Nonnull)value;
- (AttributedBuilder * _Nonnull)underlineColor:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)underlineColorWithHex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)underlineStyle:(NSUnderlineStyle)value;
- (AttributedBuilder * _Nonnull)verticalGlyphForm:(NSInteger)value;
- (AttributedBuilder * _Nonnull)writingDirection:(NSWritingDirection)writingDirection text:(NSWritingDirectionFormatType)textWritingDirection;
@end

/// The axes of the object’s alignment rectangle.
typedef SWIFT_ENUM(NSInteger, AutoAxis, closed) {
/// The center along the x-axis of the object’s alignment rectangle.
  AutoAxisCenterX = 9,
/// The center along the y-axis of the object’s alignment rectangle.
  AutoAxisCenterY = 10,
/// The object’s baseline. For objects with more than one line of text,
/// this is the baseline for the bottommost line of text.
  AutoAxisLastBaseline = 11,
/// The object’s baseline. For objects with more than one line of text,
/// this is the baseline for the topmost line of text.
  AutoAxisFirstBaseline = 12,
/// The center along the x-axis between the object’s left and right margin.
/// For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoAxisCenterXMargin = 19,
/// The center along the y-axis between the object’s top and bottom margin.
/// For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoAxisCenterYMargin = 20,
};


/// A subclass for distinguish between manually created constraint
/// and system or xcode (interface builder) created.
SWIFT_CLASS("_TtC13JiuFoundation14AutoConstraint")
@interface AutoConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The dimensions of the object’s alignment rectangle.
typedef SWIFT_ENUM(NSInteger, AutoDimension, closed) {
/// The width of the object’s alignment rectangle.
  AutoDimensionWidth = 7,
/// The height of the object’s alignment rectangle.
  AutoDimensionHeight = 8,
};

/// The sides of the object’s alignment rectangle.
typedef SWIFT_ENUM(NSInteger, AutoEdge, closed) {
/// The left side of the object’s alignment rectangle.
  AutoEdgeLeft = 1,
/// The right side of the object’s alignment rectangle.
  AutoEdgeRight = 2,
/// The top of the object’s alignment rectangle.
  AutoEdgeTop = 3,
/// The bottom of the object’s alignment rectangle.
  AutoEdgeBottom = 4,
/// The leading edge of the object’s alignment rectangle.
  AutoEdgeLeading = 5,
/// The trailing edge of the object’s alignment rectangle.
  AutoEdgeTrailing = 6,
/// The object’s left margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeLeftMargin = 13,
/// The object’s right margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeRightMargin = 14,
/// The object’s top margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeTopMargin = 15,
/// The object’s bottom margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeBottomMargin = 16,
/// The object’s leading margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeLeadingMargin = 17,
/// The object’s trailing margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeTrailingMargin = 18,
};

@class UIView;

SWIFT_CLASS("_TtC13JiuFoundation8AutoFlex")
@interface AutoFlex : NSObject
+ (NSArray<NSLayoutConstraint *> * _Nonnull)horizontal:(NSArray<UIView *> * _Nonnull)views left:(CGFloat)left right:(CGFloat)right space:(CGFloat)space;
+ (NSArray<NSLayoutConstraint *> * _Nonnull)horizontal:(NSArray<UIView *> * _Nonnull)views leading:(CGFloat)leading trailing:(CGFloat)trailing space:(CGFloat)space;
+ (NSArray<NSLayoutConstraint *> * _Nonnull)vertical:(NSArray<UIView *> * _Nonnull)views top:(CGFloat)top bottom:(CGFloat)bottom space:(CGFloat)space;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

/// A maker helps us to create constraints.
SWIFT_CLASS("_TtC13JiuFoundation9AutoMaker")
@interface AutoMaker : NSObject
/// Sets the left inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)left;
/// Sets the left inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftInset:(CGFloat)inset;
/// Sets the left inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the right inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)right;
/// Sets the right inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightInset:(CGFloat)inset;
/// Sets the right inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the top inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)top;
/// Sets the top inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topInset:(CGFloat)inset;
/// Sets the top inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the bottom inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottom;
/// Sets the bottom inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomInset:(CGFloat)inset;
/// Sets the bottom inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the leading inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leading;
/// Sets the leading inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingInset:(CGFloat)inset;
/// Sets the leading inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the trailing inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailing;
/// Sets the trailing inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingInset:(CGFloat)inset;
/// Sets the trailing inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Creates a constraint that defines the relationship between the specified edges.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Creates a constraint that defines the relationship between the specified edges.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge × x + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the left inset and the right inset with the superview.
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesHorizontal:(CGFloat)horizontal;
/// Sets the top inset and the bottom inset with the superview.
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesVertical:(CGFloat)vertical;
/// Sets all edge insets with the superview.
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesHorizontal:(CGFloat)horizontal vertical:(CGFloat)vertical;
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right;
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing;
/// Sets all edge insets with the superview without the specified edge.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge;
/// Sets all edge insets with the superview without the specified edge.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge;
/// Sets the left margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMargin;
/// Sets the left margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginInset:(CGFloat)inset;
/// Sets the left margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the right margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMargin;
/// Sets the right margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginInset:(CGFloat)inset;
/// Sets the right margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the top margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMargin;
/// Sets the top margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginInset:(CGFloat)inset;
/// Sets the top margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the bottom margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMargin;
/// Sets the bottom margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginInset:(CGFloat)inset;
/// Sets the bottom margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the leading margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMargin;
/// Sets the leading margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginInset:(CGFloat)inset;
/// Sets the leading margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the trailing margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMargin;
/// Sets the trailing margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginInset:(CGFloat)inset;
/// Sets the trailing margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified edge of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified edge of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified axis of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param axis The target axis.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge to:(UIView * _Nonnull)other axis:(enum AutoAxis)axis offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified axis of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param axis The target axis.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge to:(UIView * _Nonnull)other axis:(enum AutoAxis)axis offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the left inset and the right inset with the other view.
/// \param other The target view.
///
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesMatch:(UIView * _Nonnull)other Horizontal:(CGFloat)horizontal;
/// Sets the top inset and the bottom inset with the other view..
/// \param other The target view.
///
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesMatch:(UIView * _Nonnull)other Vertical:(CGFloat)vertical;
/// Sets all edge insets with the other view..
/// \param other The target view.
///
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesMatch:(UIView * _Nonnull)other Horizontal:(CGFloat)horizontal vertical:(CGFloat)vertical;
/// Sets all edge insets with the other view..
/// \param other The target view.
///
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithMatch:(UIView * _Nonnull)other top:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right;
/// Sets all edge insets with the other view..
/// \param other The target view.
///
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithMatch:(UIView * _Nonnull)other top:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing;
/// Sets all edge insets with the superview without the specified edge.
/// \param other The target view.
///
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithMatch:(UIView * _Nonnull)other top:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge;
/// Sets all edge insets with the superview without the specified edge.
/// \param other The target view.
///
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithMatch:(UIView * _Nonnull)other top:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge;
/// Sets the width match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)width;
/// Sets the width to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)width:(CGFloat)value;
/// Sets the width to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)width:(CGFloat)value by:(NSLayoutRelation)relation;
/// Sets the height match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)height;
/// Sets the height to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)height:(CGFloat)value;
/// Sets the height to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)height:(CGFloat)value by:(NSLayoutRelation)relation;
/// Sets the size match the superview.
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)size;
/// Sets the size to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)size:(CGSize)value;
/// Sets the size to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)size:(CGSize)value by:(NSLayoutRelation)relation;
/// Sets the size to the specified value.
/// \param width The required width.
///
/// \param height The required height.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sizeWithWidth:(CGFloat)width height:(CGFloat)height;
/// Sets the size to the specified value with the relationship.
/// \param width The required width.
///
/// \param height The required height.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sizeWithWidth:(CGFloat)width height:(CGFloat)height by:(NSLayoutRelation)relation;
/// Sets the width match with the other view.
/// \param other The target view.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)widthMatch:(UIView * _Nonnull)other;
/// Sets the offset between the width of views.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)widthMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset between the width of views with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)widthMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the height match with the other view.
/// \param other The target view.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)heightMatch:(UIView * _Nonnull)other;
/// Sets the offset between the height of views.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)heightMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset between the height of views with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)heightMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the offset between the dimension of views with the relationship.
/// \param dimension The dimension of views.
///
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)dimension:(enum AutoDimension)dimension to:(UIView * _Nullable)other offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the size match with the other view.
/// \param other The target view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sizeMatch:(UIView * _Nonnull)other;
/// Sets the size match with the other view with the relationship.
/// \param other The target view.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sizeMatch:(UIView * _Nonnull)other by:(NSLayoutRelation)relation;
/// Sets the width equal to the height times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioForWidth:(CGFloat)value SWIFT_DEPRECATED_MSG("please use aspectRadio(usingWidth:) instead");
/// Sets the relationship between the width and the height times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioForWidth:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("please use aspectRadio(usingWidth:by:) instead");
/// Sets the height equal to the width times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioForHeight:(CGFloat)value SWIFT_DEPRECATED_MSG("please use aspectRadio(usingHeight:) instead");
/// Sets the relationship between the height and the width times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioForHeight:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("please use aspectRadio(usingHeight:by:) instead");
/// Sets the width equal to the height times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioUsingWidth:(CGFloat)value;
/// Sets the relationship between the width and the height times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioUsingWidth:(CGFloat)value by:(NSLayoutRelation)relation;
/// Sets the height equal to the width times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioUsingHeight:(CGFloat)value;
/// Sets the relationship between the height and the width times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioUsingHeight:(CGFloat)value by:(NSLayoutRelation)relation;
/// Sets the x-axis center match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerX;
/// Sets the offset with the x-axis center and the superview.
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerX:(CGFloat)offset;
/// Sets the offset with the x-axis center and the superview with the relationship.
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerX:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the y-axis center match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerY;
/// Sets the offset with the y-axis center and the superview.
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerY:(CGFloat)offset;
/// Sets the offset with the y-axis center and the superview with the relationship.
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerY:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the center match the superview.
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)center;
/// Sets the offset with the y-axis center and the superview.
/// \param offset The offset with the superview center.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)center:(CGPoint)offset;
/// Sets the offset with the y-axis center and the superview.
/// \param x The offset with the superview x-axis center
///
/// \param y The offset with the superview y-axis center
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)centerX:(CGFloat)x y:(CGFloat)y;
/// Sets the x-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMatch:(UIView * _Nonnull)other;
/// Sets the offset with the x-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset with the x-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the y-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMatch:(UIView * _Nonnull)other;
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset with the y-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSArray<NSLayoutConstraint *> * _Nonnull)centerMatch:(UIView * _Nonnull)other;
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The offset with the other view center.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)centerMatch:(UIView * _Nonnull)other offset:(CGPoint)offset;
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param x The offset with other the view x-axis center
///
/// \param y The offset with other the view y-axis center
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)centerMatch:(UIView * _Nonnull)other x:(CGFloat)x y:(CGFloat)y;
/// Sets the x-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMarginMatch:(UIView * _Nonnull)other;
/// Sets the offset with the x-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMarginMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset with the x-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMarginMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the y-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMarginMatch:(UIView * _Nonnull)other;
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMarginMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset with the y-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMarginMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the axis and the specified axis of the other view with the relationship.
/// \param axis The axis of self.
///
/// \param other The target view.
///
/// \param otherAxis The target axis.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)axis:(enum AutoAxis)axis to:(UIView * _Nullable)other axis:(enum AutoAxis)otherAxis offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the axis and the specified axis of the other view with the relationship.
/// \param axis The axis of self.
///
/// \param other The target view.
///
/// \param otherAxis The target axis.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)axis:(enum AutoAxis)axis to:(UIView * _Nullable)other axis:(enum AutoAxis)otherAxis offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the left inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeft;
/// Sets the left inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftInset:(CGFloat)inset;
/// Sets the left inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the right inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRight;
/// Sets the right inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightInset:(CGFloat)inset;
/// Sets the right inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the top inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTop;
/// Sets the top inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopInset:(CGFloat)inset;
/// Sets the top inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the bottom inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottom;
/// Sets the bottom inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomInset:(CGFloat)inset;
/// Sets the bottom inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the leading inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeading;
/// Sets the leading inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingInset:(CGFloat)inset;
/// Sets the leading inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the trailing inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailing;
/// Sets the trailing inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingInset:(CGFloat)inset;
/// Sets the trailing inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Creates a constraint that defines the relationship between the specified edge.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeEdge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the left inset and the right inset with the superview.
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesHorizontal:(CGFloat)horizontal;
/// Sets the top inset and the bottom inset with the superview.
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesVertical:(CGFloat)vertical;
/// Sets all edge insets with the superview.
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesHorizontal:(CGFloat)horizontal vertical:(CGFloat)vertical;
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right;
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing;
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge;
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge;
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified edge of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeEdge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideTopTo:(UIViewController * _Nonnull)viewController SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideTopTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideTopTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideBottomTo:(UIViewController * _Nonnull)viewController SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideBottomTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideBottomTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AutoMaker (SWIFT_EXTENSION(JiuFoundation))
/// Sets the priority with which a view resists being made smaller than its intrinsic size.
/// \param value The new priority.
///
- (void)horizontalHuggingPriority:(UILayoutPriority)value;
/// Sets the priority with which a view resists being made smaller than its intrinsic size.
/// \param value The new priority.
///
- (void)verticalHuggingPriority:(UILayoutPriority)value;
/// Sets the priority with which a view resists being made larger than its intrinsic size.
/// \param value The new priority.
///
- (void)horizontalCompressionResistancePriority:(UILayoutPriority)value;
/// Sets the priority with which a view resists being made larger than its intrinsic size.
/// \param value The new priority.
///
- (void)verticalCompressionResistancePriority:(UILayoutPriority)value;
@end



@interface CALayer (SWIFT_EXTENSION(JiuFoundation))
- (void)makeShadowWithColor:(CGColorRef _Nonnull)color alpha:(float)alpha frame:(CGRect)frame x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread;
- (void)makeShadowWithColor:(CGColorRef _Nonnull)color alpha:(float)alpha size:(CGSize)size x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread;
- (void)makeShadowWithColor:(CGColorRef _Nonnull)color alpha:(float)alpha frame:(CGRect)frame x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread path:(SWIFT_NOESCAPE CGPathRef _Nonnull (^ _Nonnull)(CGRect))creator;
@end


/// 摘要（哈希）算法 ObjC 包装
SWIFT_CLASS("_TtC13JiuFoundation8CHDigest")
@interface CHDigest : NSObject
- (NSString * _Nonnull)lowercaseHex:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)uppercaseHex:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
+ (CHDigest * _Nonnull)md5 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13JiuFoundation15ContextRegister")
@interface ContextRegister : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ContextRegister * _Nonnull defaultRegister;)
+ (ContextRegister * _Nonnull)defaultRegister SWIFT_WARN_UNUSED_RESULT;
- (void)registerWithKey:(NSString * _Nonnull)key :(id _Nonnull)value;
- (id _Nonnull)findAnyWithKey:(NSString * _Nonnull)key :(SWIFT_NOESCAPE id _Nonnull (^ _Nonnull)(void))creator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC13JiuFoundation16DefaultTableCell")
@interface DefaultTableCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13JiuFoundation10DeviceInfo")
@interface DeviceInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 获取系统的模型名称，如”iPhone14,2”。
/// <ul>
///   <li>
///     See: https://github.com/InderKumarRathore/DeviceUtil
///   </li>
///   <li>
///     See: https://github.com/InderKumarRathore/DeviceGuru
///   </li>
///   <li>
///     See: https://github.com/pluwen/apple-device-model-list
///   </li>
///   <li>
///     See: https://www.theiphonewiki.com/wiki/Models
///   </li>
///   <li>
///     See: https://www.theiphonewiki.com/wiki/Category:Devices
///   </li>
///   <li>
///     See: https://everymac.com/systems/apple/iphone/index-iphone-specs.html
///   </li>
///   <li>
///     See: https://everymac.com/systems/apple/ipad/index-ipad-specs.html
///   </li>
/// </ul>
///
/// returns:
/// 模型名称
+ (NSString * _Nonnull)modelName SWIFT_WARN_UNUSED_RESULT;
/// 获取系统构建版本号，如：“19B74”。
+ (NSString * _Nullable)systemBuildVersion SWIFT_WARN_UNUSED_RESULT;
/// 获取可读的设备名称，如 “iPhone 13 Pro Max”。
+ (NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC13JiuFoundation14GradientButton")
@interface GradientButton : UIButton
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (void)setBackgroundColorWithStartColor:(UIColor * _Nonnull)startColor startPoint:(CGPoint)startPoint endColor:(UIColor * _Nonnull)endColor endPoint:(CGPoint)endPoint;
- (void)setHorizontalBackgroundColorWithStartColor:(UIColor * _Nonnull)startColor endColor:(UIColor * _Nonnull)endColor;
- (void)setVerticalBackgroundColorWithStartColor:(UIColor * _Nonnull)startColor endColor:(UIColor * _Nonnull)endColor;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LigatureLevel, closed) {
  LigatureLevelNone = 0,
  LigatureLevelFirst = 1,
};

@protocol ListViewDataSource;

SWIFT_CLASS("_TtC13JiuFoundation8ListView")
@interface ListView : UIScrollView
@property (nonatomic, weak) id <ListViewDataSource> _Nullable dataSource;
@property (nonatomic) BOOL useIntrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)reloadData;
- (void)reloadItemsAt:(NSSet<NSNumber *> * _Nonnull)indexes;
@end


SWIFT_PROTOCOL("_TtP13JiuFoundation18ListViewDataSource_")
@protocol ListViewDataSource <NSObject>
- (NSInteger)numberOfViewsInListView:(ListView * _Nonnull)listView SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)listView:(ListView * _Nonnull)listView viewAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (CGSize)listView:(ListView * _Nonnull)listView sizeForViewAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (UIEdgeInsets)listView:(ListView * _Nonnull)listView insetForViewAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end



@class UIImageView;
@class UILabel;
@class UIImage;
enum QuickButtonLayout : NSInteger;
enum QuickButtonBaseline : NSInteger;

SWIFT_CLASS("_TtC13JiuFoundation11QuickButton")
@interface QuickButton : UIButton
@property (nonatomic, readonly, strong) UIImageView * _Nonnull iconImageView;
@property (nonatomic, readonly, strong) UILabel * _Nonnull textLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull badgeLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (void)setImage:(UIImage * _Nullable)image forState:(UIControlState)state;
- (void)quickLayout:(enum QuickButtonLayout)layout baseline:(enum QuickButtonBaseline)baseline space:(CGFloat)space;
- (void)quickLayout:(enum QuickButtonLayout)layout image:(CGSize)imageSize baseline:(enum QuickButtonBaseline)baseline space:(CGFloat)space;
- (void)makeConstraintsWithImageView:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))imageView textLabel:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))textLabel;
- (void)makeBadgeConstraints:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))maker;
- (void)reloadBadge:(NSInteger)badge;
@end

typedef SWIFT_ENUM(NSInteger, QuickButtonBaseline, closed) {
  QuickButtonBaselineNone = 0,
  QuickButtonBaselineImage = 1,
  QuickButtonBaselineLabel = 2,
};

typedef SWIFT_ENUM(NSInteger, QuickButtonLayout, closed) {
  QuickButtonLayoutNone = 0,
  QuickButtonLayoutTextLeft = 1,
  QuickButtonLayoutTextRight = 2,
  QuickButtonLayoutTextTop = 3,
  QuickButtonLayoutTextBottom = 4,
};


SWIFT_CLASS("_TtC13JiuFoundation17SubtitleTableCell")
@interface SubtitleTableCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


@interface UIColor (SWIFT_EXTENSION(JiuFoundation))
/// 使用数字生成 UIColor。颜色排序为 A，R，G，B。
/// 当 value 的值为 0x00_0000 到 0xFF_FFFFF 时，Alpha 解析为 1。
/// note:
/// Objective-C 请使用 <code>[UIColor argb]</code>
/// \param argb 色值，范围为 0x0000_0000 到 0xFFFF_FFFFF。
///
- (nonnull instancetype)initWithArgb:(uint32_t)argb;
/// 使用数字生成 UIColor。颜色排序为 R，G，B，A。
/// note:
/// Objective-C 请使用 <code>[UIColor rgb:alpha:]</code>
/// \param rgb 色值，范围为 0x00_0000 到 0xFF_FFFFF。
///
/// \param alpha 透明度，取值范围为 0 - 1。
///
- (nonnull instancetype)initWithRgb:(uint32_t)rgb alpha:(CGFloat)alpha;
/// 使用 String 生成 UIColor。可以接受的格式有：
/// <ul>
///   <li>
///     FFFFFF
///   </li>
///   <li>
///     FFFFFFFF
///   </li>
///   <li>
///     #FFFFFF
///   </li>
///   <li>
///     #FFFFFFFF
///   </li>
///   <li>
///     0xFFFFFF
///   </li>
///   <li>
///     0xFFFFFFFF
///   </li>
///   <li>
///     0XFFFFFF
///   </li>
///   <li>
///     0XFFFFFFFF
///   </li>
/// </ul>
/// note:
/// Objective-C 请使用 <code>[UIColor from:]</code>
/// \param value 符合上述格式的字符串。
///
- (nonnull instancetype)init:(NSString * _Nonnull)value;
@end



@interface UINavigationController (SWIFT_EXTENSION(JiuFoundation))
- (void)pushViewController:(UIViewController * _Nonnull)viewController;
- (void)popViewController;
- (NSArray<UIViewController *> * _Nonnull)popViewControllerWithCount:(NSInteger)count animated:(BOOL)animated;
- (NSArray<UIViewController *> * _Nonnull)popViewControllerTo:(Class _Nonnull)class_ animated:(BOOL)animated;
- (void)replaceViewController:(UIViewController * _Nonnull)viewController count:(NSInteger)count animated:(BOOL)animated;
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
- (void)makeShadowWithColor:(UIColor * _Nonnull)color alpha:(float)alpha frame:(CGRect)frame x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread;
- (void)makeShadowWithColor:(UIColor * _Nonnull)color alpha:(float)alpha size:(CGSize)size x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread;
- (void)makeShadowWithColor:(UIColor * _Nonnull)color alpha:(float)alpha frame:(CGRect)frame x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread path:(SWIFT_NOESCAPE CGPathRef _Nonnull (^ _Nonnull)(CGRect))creator;
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideTopTo:(UIViewController * _Nonnull)viewController SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideTopTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideTopTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideBottomTo:(UIViewController * _Nonnull)viewController SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideBottomTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideBottomTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Adds a view to the end of the receiver’s list of subviews
/// and configures the constraints for the view.
/// This method establishes a strong reference to view
/// and sets its next responder to the receiver, which is its new superview.
/// Views can have only one superview. If <code>view</code> already has a superview and that view is not the receiver,
/// this method removes the previous superview before making the receiver its new superview.
/// \param view The view to be added. After being added,
/// this view appears on top of any other subviews.
///
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)addSubview:(UIView * _Nonnull)view make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Inserts a subview at the specified index and configures the constraints for the view.
/// This method establishes a strong reference to <code>view</code> and sets its next responder to the receiver,
/// which is its new superview.
/// Views can have only one superview. If <code>view</code> already has a superview and that view is not the receiver,
/// this method removes the previous superview before making the receiver its new superview.
/// \param view The view to insert.
///
/// \param index The index in the array of the <code>subviews</code> property at which to insert the view.
/// Subview indices start at <code>0</code> and cannot be greater than the number of subviews.
///
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)insertSubview:(UIView * _Nonnull)view at:(NSInteger)index make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Inserts a view above another view in the view hierarchy.
/// \param view The view to insert.
/// It’s removed from its superview if it’s not a sibling of <code>siblingSubview</code>.
///
/// \param other The sibling view that will be behind the inserted view.
///
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)insertSubview:(UIView * _Nonnull)view above:(UIView * _Nonnull)other make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Inserts a view below another view in the view hierarchy.
/// \param view The view to insert below another view.
/// It’s removed from its superview if it’s not a sibling of <code>siblingSubview</code>.
///
/// \param other The sibling view that will be above the inserted view.
///
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)insertSubview:(UIView * _Nonnull)view below:(UIView * _Nonnull)other make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Adds constraints in the view.
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoMake:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Updates constraints in the view.
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoUpdate:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make SWIFT_DEPRECATED_MSG("", "autoUpdate(in:_:)");
/// Updates constraints in the view.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     constraints: The list constraints that should be updated.
///   </li>
///   <li>
///     make: The scope within which you can build up the constraints which you wish to apply to the view.
///   </li>
/// </ul>
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoUpdateWithConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make SWIFT_DEPRECATED_MSG("", "autoUpdate(in:_:)");
/// 专门给 Objective-C 调用的方法，请不要直接使用。
- (NSArray<NSLayoutConstraint *> * _Nonnull)_autoUpdateWithConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoRemakeWithConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the x-axis center match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterX SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the x-axis center and the superview.
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterX:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the x-axis center and the superview with the relationship.
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterX:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the y-axis center match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterY SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the superview.
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterY:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the superview with the relationship.
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterY:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the center match the superview.
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenter SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the superview.
/// \param offset The offset with the superview center.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenter:(CGPoint)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the superview.
/// \param x The offset with the superview x-axis center
///
/// \param y The offset with the superview y-axis center
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenterWithX:(CGFloat)x y:(CGFloat)y SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the x-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterXWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the x-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterXWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the x-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterXWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the y-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterYWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterYWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterYWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the axis between views with the relationship.
/// \param axis The axis of self.
///
/// \param other The target view.
///
/// \param otherAxis The axis of target view.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAxis:(enum AutoAxis)axis to:(UIView * _Nullable)other axis:(enum AutoAxis)otherAxis offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenterWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The offset with the other view center.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenterWithMatch:(UIView * _Nonnull)other offset:(CGPoint)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param x The offset with other the view x-axis center
///
/// \param y The offset with other the view y-axis center
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenterWithMatch:(UIView * _Nonnull)other x:(CGFloat)x y:(CGFloat)y SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Creates a constraint that defines the relationship between the specified edges.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoEdge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the edge and the specified edge of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeEdge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the width match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidth SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the width to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidth:(CGFloat)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the width to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidth:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeight SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeight:(CGFloat)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeight:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size match the superview.
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSize SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSize:(CGSize)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSize:(CGSize)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size to the specified value.
/// \param width The required width.
///
/// \param height The required height.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSizeWithWidth:(CGFloat)width height:(CGFloat)height SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size to the specified value with the relationship.
/// \param width The required width.
///
/// \param height The required height.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSizeWithWidth:(CGFloat)width height:(CGFloat)height by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the width match with the other view.
/// \param other The target view.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidthWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the width of views.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidthWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the width of views with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidthWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height match with the other view.
/// \param other The target view.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeightWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the height of views.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeightWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the height of views with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeightWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the dimension of views with the relationship.
/// \param dimension The dimension of views.
///
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoDimension:(enum AutoDimension)dimension to:(UIView * _Nullable)other offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size match with the other view.
/// \param other The target view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSizeWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size match with the other view with the relationship.
/// \param other The target view.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSizeWithMatch:(UIView * _Nonnull)other by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the width equal to the height times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAspectRadioForWidth:(CGFloat)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the relationship between the width and the height times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAspectRadioForWidth:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height equal to the width times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAspectRadioForHeight:(CGFloat)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the relationship between the height and the width times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAspectRadioForHeight:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the left inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeft SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRight SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTop SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottom SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeading SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailing SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Creates a constraint that defines the relationship between the specified edge.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeEdge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset and the right inset with the superview.
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithHorizontal:(CGFloat)horizontal SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset and the bottom inset with the superview.
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithVertical:(CGFloat)vertical SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithHorizontal:(CGFloat)horizontal vertical:(CGFloat)vertical SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the left inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeft SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRight SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTop SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottom SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeading SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailing SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Creates a constraint that defines the relationship between the specified edge.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoEdge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Creates a constraint that defines the relationship between the specified edge.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge × x + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoEdge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset x:(CGFloat)multiplier by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset and the right inset with the superview.
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithHorizontal:(CGFloat)horizontal SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset and the bottom inset with the superview.
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithVertical:(CGFloat)vertical SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithHorizontal:(CGFloat)horizontal vertical:(CGFloat)vertical SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview without the specified edge.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end



SWIFT_CLASS("_TtC13JiuFoundation15Value1TableCell")
@interface Value1TableCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13JiuFoundation15Value2TableCell")
@interface Value2TableCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.8 (swiftlang-5.8.0.124.2 clang-1403.0.22.11.100)
#ifndef JIUFOUNDATION_SWIFT_H
#define JIUFOUNDATION_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="JiuFoundation",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;

SWIFT_CLASS("_TtC13JiuFoundation7AppInfo")
@interface AppInfo : NSObject
/// 获取当前的 App 版本号
///
/// returns:
/// 当前的 App 版本号，如“1.2.3”
+ (NSString * _Nonnull)appVersion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSAttributedString;
@class NSMutableAttributedString;

/// A simple wrapper for <code>NSAttributedString</code>.
/// <ul>
///   <li>
///     See: <a href="https://developer.apple.com/documentation/foundation/nsattributedstring/key">NSAttributedString.Key</a> .
///   </li>
/// </ul>
SWIFT_CLASS("_TtC13JiuFoundation17AttributedBuilder")
@interface AttributedBuilder : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)string OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (nullable instancetype)initWithAny:(NSString * _Nullable)string;
- (AttributedBuilder * _Nonnull)setAttributeWithKey:(NSAttributedStringKey _Nonnull)key value:(id _Nullable)value;
- (AttributedBuilder * _Nonnull)appendWithOther:(NSAttributedString * _Nonnull)other SWIFT_DEPRECATED_MSG("", "appendAttributedString:");
- (AttributedBuilder * _Nonnull)appendString:(NSString * _Nonnull)value;
- (AttributedBuilder * _Nonnull)appendAttributedString:(NSAttributedString * _Nonnull)attributedString;
- (AttributedBuilder * _Nonnull)append:(AttributedBuilder * _Nonnull)other;
- (NSMutableAttributedString * _Nonnull)done SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("", "build");
- (NSAttributedString * _Nonnull)build SWIFT_WARN_UNUSED_RESULT;
- (NSMutableAttributedString * _Nonnull)buildString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (AttributedBuilder * _Nonnull)copyWithString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
+ (AttributedBuilder * _Nonnull)template SWIFT_WARN_UNUSED_RESULT;
@end

@class NSTextAttachment;
@class UIColor;
@class UIFont;
enum LigatureLevel : NSInteger;
@class NSURL;
@class NSParagraphStyle;
@class NSShadow;

@interface AttributedBuilder (SWIFT_EXTENSION(JiuFoundation))
- (AttributedBuilder * _Nonnull)attachment:(NSTextAttachment * _Nonnull)value;
- (AttributedBuilder * _Nonnull)backgroundColor:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)backgroundColorWithHex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)baselineOffset:(double)value;
- (AttributedBuilder * _Nonnull)expansion:(double)value;
- (AttributedBuilder * _Nonnull)font:(UIFont * _Nonnull)value;
- (AttributedBuilder * _Nonnull)systemFont:(CGFloat)size;
- (AttributedBuilder * _Nonnull)systemFont:(CGFloat)size weight:(UIFontWeight)weight;
- (AttributedBuilder * _Nonnull)color:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)colorWithHex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)kern:(double)value;
- (AttributedBuilder * _Nonnull)ligature:(enum LigatureLevel)value;
- (AttributedBuilder * _Nonnull)linkWithUrl:(NSURL * _Nonnull)url;
- (AttributedBuilder * _Nonnull)link:(NSString * _Nonnull)value;
- (AttributedBuilder * _Nonnull)obliqueness:(double)value;
- (AttributedBuilder * _Nonnull)paragraphStyle:(NSParagraphStyle * _Nonnull)value;
- (AttributedBuilder * _Nonnull)shadow:(NSShadow * _Nonnull)value;
- (AttributedBuilder * _Nonnull)shadowWithOffset:(CGSize)offset radius:(CGFloat)radius color:(UIColor * _Nonnull)color;
- (AttributedBuilder * _Nonnull)shadowWithAlpha:(CGFloat)alpha blur:(CGFloat)blur x:(CGFloat)x y:(CGFloat)y color:(UIColor * _Nonnull)color;
- (AttributedBuilder * _Nonnull)shadowWithAlpha:(CGFloat)alpha blur:(CGFloat)blur x:(CGFloat)x y:(CGFloat)y hex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)strikethroughStyle:(NSUnderlineStyle)value;
- (AttributedBuilder * _Nonnull)strikethroughColor:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)strikethroughColorWithHex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)strokeColor:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)strokeColorWithArgb:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)strokeWidth:(double)value;
- (AttributedBuilder * _Nonnull)textEffect:(NSTextEffectStyle _Nonnull)value;
- (AttributedBuilder * _Nonnull)underlineColor:(UIColor * _Nonnull)value;
- (AttributedBuilder * _Nonnull)underlineColorWithHex:(uint32_t)hex;
- (AttributedBuilder * _Nonnull)underlineStyle:(NSUnderlineStyle)value;
- (AttributedBuilder * _Nonnull)verticalGlyphForm:(NSInteger)value;
- (AttributedBuilder * _Nonnull)writingDirection:(NSWritingDirection)writingDirection text:(NSWritingDirectionFormatType)textWritingDirection;
@end

/// The axes of the object’s alignment rectangle.
typedef SWIFT_ENUM(NSInteger, AutoAxis, closed) {
/// The center along the x-axis of the object’s alignment rectangle.
  AutoAxisCenterX = 9,
/// The center along the y-axis of the object’s alignment rectangle.
  AutoAxisCenterY = 10,
/// The object’s baseline. For objects with more than one line of text,
/// this is the baseline for the bottommost line of text.
  AutoAxisLastBaseline = 11,
/// The object’s baseline. For objects with more than one line of text,
/// this is the baseline for the topmost line of text.
  AutoAxisFirstBaseline = 12,
/// The center along the x-axis between the object’s left and right margin.
/// For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoAxisCenterXMargin = 19,
/// The center along the y-axis between the object’s top and bottom margin.
/// For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoAxisCenterYMargin = 20,
};


/// A subclass for distinguish between manually created constraint
/// and system or xcode (interface builder) created.
SWIFT_CLASS("_TtC13JiuFoundation14AutoConstraint")
@interface AutoConstraint : NSLayoutConstraint
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The dimensions of the object’s alignment rectangle.
typedef SWIFT_ENUM(NSInteger, AutoDimension, closed) {
/// The width of the object’s alignment rectangle.
  AutoDimensionWidth = 7,
/// The height of the object’s alignment rectangle.
  AutoDimensionHeight = 8,
};

/// The sides of the object’s alignment rectangle.
typedef SWIFT_ENUM(NSInteger, AutoEdge, closed) {
/// The left side of the object’s alignment rectangle.
  AutoEdgeLeft = 1,
/// The right side of the object’s alignment rectangle.
  AutoEdgeRight = 2,
/// The top of the object’s alignment rectangle.
  AutoEdgeTop = 3,
/// The bottom of the object’s alignment rectangle.
  AutoEdgeBottom = 4,
/// The leading edge of the object’s alignment rectangle.
  AutoEdgeLeading = 5,
/// The trailing edge of the object’s alignment rectangle.
  AutoEdgeTrailing = 6,
/// The object’s left margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeLeftMargin = 13,
/// The object’s right margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeRightMargin = 14,
/// The object’s top margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeTopMargin = 15,
/// The object’s bottom margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeBottomMargin = 16,
/// The object’s leading margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeLeadingMargin = 17,
/// The object’s trailing margin. For <code>UIView</code> objects, the margins are defined by their <code>layoutMargins</code> property.
  AutoEdgeTrailingMargin = 18,
};

@class UIView;

SWIFT_CLASS("_TtC13JiuFoundation8AutoFlex")
@interface AutoFlex : NSObject
+ (NSArray<NSLayoutConstraint *> * _Nonnull)horizontal:(NSArray<UIView *> * _Nonnull)views left:(CGFloat)left right:(CGFloat)right space:(CGFloat)space;
+ (NSArray<NSLayoutConstraint *> * _Nonnull)horizontal:(NSArray<UIView *> * _Nonnull)views leading:(CGFloat)leading trailing:(CGFloat)trailing space:(CGFloat)space;
+ (NSArray<NSLayoutConstraint *> * _Nonnull)vertical:(NSArray<UIView *> * _Nonnull)views top:(CGFloat)top bottom:(CGFloat)bottom space:(CGFloat)space;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIViewController;

/// A maker helps us to create constraints.
SWIFT_CLASS("_TtC13JiuFoundation9AutoMaker")
@interface AutoMaker : NSObject
/// Sets the left inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)left;
/// Sets the left inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftInset:(CGFloat)inset;
/// Sets the left inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the right inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)right;
/// Sets the right inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightInset:(CGFloat)inset;
/// Sets the right inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the top inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)top;
/// Sets the top inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topInset:(CGFloat)inset;
/// Sets the top inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the bottom inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottom;
/// Sets the bottom inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomInset:(CGFloat)inset;
/// Sets the bottom inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the leading inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leading;
/// Sets the leading inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingInset:(CGFloat)inset;
/// Sets the leading inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the trailing inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailing;
/// Sets the trailing inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingInset:(CGFloat)inset;
/// Sets the trailing inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Creates a constraint that defines the relationship between the specified edges.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Creates a constraint that defines the relationship between the specified edges.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge × x + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the left inset and the right inset with the superview.
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesHorizontal:(CGFloat)horizontal;
/// Sets the top inset and the bottom inset with the superview.
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesVertical:(CGFloat)vertical;
/// Sets all edge insets with the superview.
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesHorizontal:(CGFloat)horizontal vertical:(CGFloat)vertical;
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right;
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing;
/// Sets all edge insets with the superview without the specified edge.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge;
/// Sets all edge insets with the superview without the specified edge.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge;
/// Sets the left margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMargin;
/// Sets the left margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginInset:(CGFloat)inset;
/// Sets the left margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the right margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMargin;
/// Sets the right margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginInset:(CGFloat)inset;
/// Sets the right margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the top margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMargin;
/// Sets the top margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginInset:(CGFloat)inset;
/// Sets the top margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the bottom margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMargin;
/// Sets the bottom margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginInset:(CGFloat)inset;
/// Sets the bottom margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the leading margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMargin;
/// Sets the leading margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginInset:(CGFloat)inset;
/// Sets the leading margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the trailing margin inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMargin;
/// Sets the trailing margin inset with the superview to margin inset.
/// \param inset The value of the margin inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginInset:(CGFloat)inset;
/// Sets the trailing margin inset with the superview to margin inset, also set the relationship.
/// \param inset The value of the margin inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified edge of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified edge of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified axis of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param axis The target axis.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge to:(UIView * _Nonnull)other axis:(enum AutoAxis)axis offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified axis of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param axis The target axis.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)edge:(enum AutoEdge)edge to:(UIView * _Nonnull)other axis:(enum AutoAxis)axis offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leftMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)rightMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)topMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)bottomMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)leadingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)trailingMarginTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the left inset and the right inset with the other view.
/// \param other The target view.
///
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesMatch:(UIView * _Nonnull)other Horizontal:(CGFloat)horizontal;
/// Sets the top inset and the bottom inset with the other view..
/// \param other The target view.
///
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesMatch:(UIView * _Nonnull)other Vertical:(CGFloat)vertical;
/// Sets all edge insets with the other view..
/// \param other The target view.
///
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesMatch:(UIView * _Nonnull)other Horizontal:(CGFloat)horizontal vertical:(CGFloat)vertical;
/// Sets all edge insets with the other view..
/// \param other The target view.
///
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithMatch:(UIView * _Nonnull)other top:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right;
/// Sets all edge insets with the other view..
/// \param other The target view.
///
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithMatch:(UIView * _Nonnull)other top:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing;
/// Sets all edge insets with the superview without the specified edge.
/// \param other The target view.
///
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithMatch:(UIView * _Nonnull)other top:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge;
/// Sets all edge insets with the superview without the specified edge.
/// \param other The target view.
///
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)edgesWithMatch:(UIView * _Nonnull)other top:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge;
/// Sets the width match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)width;
/// Sets the width to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)width:(CGFloat)value;
/// Sets the width to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)width:(CGFloat)value by:(NSLayoutRelation)relation;
/// Sets the height match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)height;
/// Sets the height to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)height:(CGFloat)value;
/// Sets the height to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)height:(CGFloat)value by:(NSLayoutRelation)relation;
/// Sets the size match the superview.
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)size;
/// Sets the size to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)size:(CGSize)value;
/// Sets the size to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)size:(CGSize)value by:(NSLayoutRelation)relation;
/// Sets the size to the specified value.
/// \param width The required width.
///
/// \param height The required height.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sizeWithWidth:(CGFloat)width height:(CGFloat)height;
/// Sets the size to the specified value with the relationship.
/// \param width The required width.
///
/// \param height The required height.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sizeWithWidth:(CGFloat)width height:(CGFloat)height by:(NSLayoutRelation)relation;
/// Sets the width match with the other view.
/// \param other The target view.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)widthMatch:(UIView * _Nonnull)other;
/// Sets the offset between the width of views.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)widthMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset between the width of views with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)widthMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the height match with the other view.
/// \param other The target view.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)heightMatch:(UIView * _Nonnull)other;
/// Sets the offset between the height of views.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)heightMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset between the height of views with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)heightMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the offset between the dimension of views with the relationship.
/// \param dimension The dimension of views.
///
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)dimension:(enum AutoDimension)dimension to:(UIView * _Nullable)other offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the size match with the other view.
/// \param other The target view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sizeMatch:(UIView * _Nonnull)other;
/// Sets the size match with the other view with the relationship.
/// \param other The target view.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)sizeMatch:(UIView * _Nonnull)other by:(NSLayoutRelation)relation;
/// Sets the width equal to the height times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioForWidth:(CGFloat)value SWIFT_DEPRECATED_MSG("please use aspectRadio(usingWidth:) instead");
/// Sets the relationship between the width and the height times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioForWidth:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("please use aspectRadio(usingWidth:by:) instead");
/// Sets the height equal to the width times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioForHeight:(CGFloat)value SWIFT_DEPRECATED_MSG("please use aspectRadio(usingHeight:) instead");
/// Sets the relationship between the height and the width times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioForHeight:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("please use aspectRadio(usingHeight:by:) instead");
/// Sets the width equal to the height times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioUsingWidth:(CGFloat)value;
/// Sets the relationship between the width and the height times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioUsingWidth:(CGFloat)value by:(NSLayoutRelation)relation;
/// Sets the height equal to the width times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioUsingHeight:(CGFloat)value;
/// Sets the relationship between the height and the width times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)aspectRadioUsingHeight:(CGFloat)value by:(NSLayoutRelation)relation;
/// Sets the x-axis center match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerX;
/// Sets the offset with the x-axis center and the superview.
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerX:(CGFloat)offset;
/// Sets the offset with the x-axis center and the superview with the relationship.
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerX:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the y-axis center match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerY;
/// Sets the offset with the y-axis center and the superview.
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerY:(CGFloat)offset;
/// Sets the offset with the y-axis center and the superview with the relationship.
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerY:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the center match the superview.
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)center;
/// Sets the offset with the y-axis center and the superview.
/// \param offset The offset with the superview center.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)center:(CGPoint)offset;
/// Sets the offset with the y-axis center and the superview.
/// \param x The offset with the superview x-axis center
///
/// \param y The offset with the superview y-axis center
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)centerX:(CGFloat)x y:(CGFloat)y;
/// Sets the x-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMatch:(UIView * _Nonnull)other;
/// Sets the offset with the x-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset with the x-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the y-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMatch:(UIView * _Nonnull)other;
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset with the y-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSArray<NSLayoutConstraint *> * _Nonnull)centerMatch:(UIView * _Nonnull)other;
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The offset with the other view center.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)centerMatch:(UIView * _Nonnull)other offset:(CGPoint)offset;
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param x The offset with other the view x-axis center
///
/// \param y The offset with other the view y-axis center
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)centerMatch:(UIView * _Nonnull)other x:(CGFloat)x y:(CGFloat)y;
/// Sets the x-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMarginMatch:(UIView * _Nonnull)other;
/// Sets the offset with the x-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMarginMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset with the x-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerXMarginMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the y-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMarginMatch:(UIView * _Nonnull)other;
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMarginMatch:(UIView * _Nonnull)other offset:(CGFloat)offset;
/// Sets the offset with the y-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)centerYMarginMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the axis and the specified axis of the other view with the relationship.
/// \param axis The axis of self.
///
/// \param other The target view.
///
/// \param otherAxis The target axis.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)axis:(enum AutoAxis)axis to:(UIView * _Nullable)other axis:(enum AutoAxis)otherAxis offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the axis and the specified axis of the other view with the relationship.
/// \param axis The axis of self.
///
/// \param other The target view.
///
/// \param otherAxis The target axis.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)axis:(enum AutoAxis)axis to:(UIView * _Nullable)other axis:(enum AutoAxis)otherAxis offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation;
/// Sets the left inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeft;
/// Sets the left inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftInset:(CGFloat)inset;
/// Sets the left inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the right inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRight;
/// Sets the right inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightInset:(CGFloat)inset;
/// Sets the right inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the top inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTop;
/// Sets the top inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopInset:(CGFloat)inset;
/// Sets the top inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the bottom inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottom;
/// Sets the bottom inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomInset:(CGFloat)inset;
/// Sets the bottom inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the leading inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeading;
/// Sets the leading inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingInset:(CGFloat)inset;
/// Sets the leading inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the trailing inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailing;
/// Sets the trailing inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingInset:(CGFloat)inset;
/// Sets the trailing inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingInset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Creates a constraint that defines the relationship between the specified edge.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeEdge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset by:(NSLayoutRelation)relation;
/// Sets the left inset and the right inset with the superview.
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesHorizontal:(CGFloat)horizontal;
/// Sets the top inset and the bottom inset with the superview.
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesVertical:(CGFloat)vertical;
/// Sets all edge insets with the superview.
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesHorizontal:(CGFloat)horizontal vertical:(CGFloat)vertical;
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right;
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing;
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge;
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)safeEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge;
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset;
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Sets the distance between the edge and the specified edge of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)safeEdge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation;
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideTopTo:(UIViewController * _Nonnull)viewController SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideTopTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideTopTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideBottomTo:(UIViewController * _Nonnull)viewController SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideBottomTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)guideBottomTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface AutoMaker (SWIFT_EXTENSION(JiuFoundation))
/// Sets the priority with which a view resists being made smaller than its intrinsic size.
/// \param value The new priority.
///
- (void)horizontalHuggingPriority:(UILayoutPriority)value;
/// Sets the priority with which a view resists being made smaller than its intrinsic size.
/// \param value The new priority.
///
- (void)verticalHuggingPriority:(UILayoutPriority)value;
/// Sets the priority with which a view resists being made larger than its intrinsic size.
/// \param value The new priority.
///
- (void)horizontalCompressionResistancePriority:(UILayoutPriority)value;
/// Sets the priority with which a view resists being made larger than its intrinsic size.
/// \param value The new priority.
///
- (void)verticalCompressionResistancePriority:(UILayoutPriority)value;
@end



@interface CALayer (SWIFT_EXTENSION(JiuFoundation))
- (void)makeShadowWithColor:(CGColorRef _Nonnull)color alpha:(float)alpha frame:(CGRect)frame x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread;
- (void)makeShadowWithColor:(CGColorRef _Nonnull)color alpha:(float)alpha size:(CGSize)size x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread;
- (void)makeShadowWithColor:(CGColorRef _Nonnull)color alpha:(float)alpha frame:(CGRect)frame x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread path:(SWIFT_NOESCAPE CGPathRef _Nonnull (^ _Nonnull)(CGRect))creator;
@end


/// 摘要（哈希）算法 ObjC 包装
SWIFT_CLASS("_TtC13JiuFoundation8CHDigest")
@interface CHDigest : NSObject
- (NSString * _Nonnull)lowercaseHex:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)uppercaseHex:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
+ (CHDigest * _Nonnull)md5 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC13JiuFoundation15ContextRegister")
@interface ContextRegister : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ContextRegister * _Nonnull defaultRegister;)
+ (ContextRegister * _Nonnull)defaultRegister SWIFT_WARN_UNUSED_RESULT;
- (void)registerWithKey:(NSString * _Nonnull)key :(id _Nonnull)value;
- (id _Nonnull)findAnyWithKey:(NSString * _Nonnull)key :(SWIFT_NOESCAPE id _Nonnull (^ _Nonnull)(void))creator SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC13JiuFoundation16DefaultTableCell")
@interface DefaultTableCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13JiuFoundation10DeviceInfo")
@interface DeviceInfo : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 获取系统的模型名称，如”iPhone14,2”。
/// <ul>
///   <li>
///     See: https://github.com/InderKumarRathore/DeviceUtil
///   </li>
///   <li>
///     See: https://github.com/InderKumarRathore/DeviceGuru
///   </li>
///   <li>
///     See: https://github.com/pluwen/apple-device-model-list
///   </li>
///   <li>
///     See: https://www.theiphonewiki.com/wiki/Models
///   </li>
///   <li>
///     See: https://www.theiphonewiki.com/wiki/Category:Devices
///   </li>
///   <li>
///     See: https://everymac.com/systems/apple/iphone/index-iphone-specs.html
///   </li>
///   <li>
///     See: https://everymac.com/systems/apple/ipad/index-ipad-specs.html
///   </li>
/// </ul>
///
/// returns:
/// 模型名称
+ (NSString * _Nonnull)modelName SWIFT_WARN_UNUSED_RESULT;
/// 获取系统构建版本号，如：“19B74”。
+ (NSString * _Nullable)systemBuildVersion SWIFT_WARN_UNUSED_RESULT;
/// 获取可读的设备名称，如 “iPhone 13 Pro Max”。
+ (NSString * _Nonnull)deviceName SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC13JiuFoundation14GradientButton")
@interface GradientButton : UIButton
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
- (void)setBackgroundColorWithStartColor:(UIColor * _Nonnull)startColor startPoint:(CGPoint)startPoint endColor:(UIColor * _Nonnull)endColor endPoint:(CGPoint)endPoint;
- (void)setHorizontalBackgroundColorWithStartColor:(UIColor * _Nonnull)startColor endColor:(UIColor * _Nonnull)endColor;
- (void)setVerticalBackgroundColorWithStartColor:(UIColor * _Nonnull)startColor endColor:(UIColor * _Nonnull)endColor;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, LigatureLevel, closed) {
  LigatureLevelNone = 0,
  LigatureLevelFirst = 1,
};

@protocol ListViewDataSource;

SWIFT_CLASS("_TtC13JiuFoundation8ListView")
@interface ListView : UIScrollView
@property (nonatomic, weak) id <ListViewDataSource> _Nullable dataSource;
@property (nonatomic) BOOL useIntrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)reloadData;
- (void)reloadItemsAt:(NSSet<NSNumber *> * _Nonnull)indexes;
@end


SWIFT_PROTOCOL("_TtP13JiuFoundation18ListViewDataSource_")
@protocol ListViewDataSource <NSObject>
- (NSInteger)numberOfViewsInListView:(ListView * _Nonnull)listView SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nonnull)listView:(ListView * _Nonnull)listView viewAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (CGSize)listView:(ListView * _Nonnull)listView sizeForViewAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (UIEdgeInsets)listView:(ListView * _Nonnull)listView insetForViewAtIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
@end



@class UIImageView;
@class UILabel;
@class UIImage;
enum QuickButtonLayout : NSInteger;
enum QuickButtonBaseline : NSInteger;

SWIFT_CLASS("_TtC13JiuFoundation11QuickButton")
@interface QuickButton : UIButton
@property (nonatomic, readonly, strong) UIImageView * _Nonnull iconImageView;
@property (nonatomic, readonly, strong) UILabel * _Nonnull textLabel;
@property (nonatomic, readonly, strong) UILabel * _Nonnull badgeLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (void)setImage:(UIImage * _Nullable)image forState:(UIControlState)state;
- (void)quickLayout:(enum QuickButtonLayout)layout baseline:(enum QuickButtonBaseline)baseline space:(CGFloat)space;
- (void)quickLayout:(enum QuickButtonLayout)layout image:(CGSize)imageSize baseline:(enum QuickButtonBaseline)baseline space:(CGFloat)space;
- (void)makeConstraintsWithImageView:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))imageView textLabel:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))textLabel;
- (void)makeBadgeConstraints:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))maker;
- (void)reloadBadge:(NSInteger)badge;
@end

typedef SWIFT_ENUM(NSInteger, QuickButtonBaseline, closed) {
  QuickButtonBaselineNone = 0,
  QuickButtonBaselineImage = 1,
  QuickButtonBaselineLabel = 2,
};

typedef SWIFT_ENUM(NSInteger, QuickButtonLayout, closed) {
  QuickButtonLayoutNone = 0,
  QuickButtonLayoutTextLeft = 1,
  QuickButtonLayoutTextRight = 2,
  QuickButtonLayoutTextTop = 3,
  QuickButtonLayoutTextBottom = 4,
};


SWIFT_CLASS("_TtC13JiuFoundation17SubtitleTableCell")
@interface SubtitleTableCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


@interface UIColor (SWIFT_EXTENSION(JiuFoundation))
/// 使用数字生成 UIColor。颜色排序为 A，R，G，B。
/// 当 value 的值为 0x00_0000 到 0xFF_FFFFF 时，Alpha 解析为 1。
/// note:
/// Objective-C 请使用 <code>[UIColor argb]</code>
/// \param argb 色值，范围为 0x0000_0000 到 0xFFFF_FFFFF。
///
- (nonnull instancetype)initWithArgb:(uint32_t)argb;
/// 使用数字生成 UIColor。颜色排序为 R，G，B，A。
/// note:
/// Objective-C 请使用 <code>[UIColor rgb:alpha:]</code>
/// \param rgb 色值，范围为 0x00_0000 到 0xFF_FFFFF。
///
/// \param alpha 透明度，取值范围为 0 - 1。
///
- (nonnull instancetype)initWithRgb:(uint32_t)rgb alpha:(CGFloat)alpha;
/// 使用 String 生成 UIColor。可以接受的格式有：
/// <ul>
///   <li>
///     FFFFFF
///   </li>
///   <li>
///     FFFFFFFF
///   </li>
///   <li>
///     #FFFFFF
///   </li>
///   <li>
///     #FFFFFFFF
///   </li>
///   <li>
///     0xFFFFFF
///   </li>
///   <li>
///     0xFFFFFFFF
///   </li>
///   <li>
///     0XFFFFFF
///   </li>
///   <li>
///     0XFFFFFFFF
///   </li>
/// </ul>
/// note:
/// Objective-C 请使用 <code>[UIColor from:]</code>
/// \param value 符合上述格式的字符串。
///
- (nonnull instancetype)init:(NSString * _Nonnull)value;
@end



@interface UINavigationController (SWIFT_EXTENSION(JiuFoundation))
- (void)pushViewController:(UIViewController * _Nonnull)viewController;
- (void)popViewController;
- (NSArray<UIViewController *> * _Nonnull)popViewControllerWithCount:(NSInteger)count animated:(BOOL)animated;
- (NSArray<UIViewController *> * _Nonnull)popViewControllerTo:(Class _Nonnull)class_ animated:(BOOL)animated;
- (void)replaceViewController:(UIViewController * _Nonnull)viewController count:(NSInteger)count animated:(BOOL)animated;
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
- (void)makeShadowWithColor:(UIColor * _Nonnull)color alpha:(float)alpha frame:(CGRect)frame x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread;
- (void)makeShadowWithColor:(UIColor * _Nonnull)color alpha:(float)alpha size:(CGSize)size x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread;
- (void)makeShadowWithColor:(UIColor * _Nonnull)color alpha:(float)alpha frame:(CGRect)frame x:(CGFloat)x y:(CGFloat)y blur:(CGFloat)blur spread:(CGFloat)spread path:(SWIFT_NOESCAPE CGPathRef _Nonnull (^ _Nonnull)(CGRect))creator;
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideTopTo:(UIViewController * _Nonnull)viewController SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideTopTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the top layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideTopTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideBottomTo:(UIViewController * _Nonnull)viewController SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideBottomTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
/// Creates a constraint that defines the relationship between the bottom layout guide of the controller.
/// \param viewController The target view controller.
///
/// \param inset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoGuideBottomTo:(UIViewController * _Nonnull)viewController inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.") SWIFT_AVAILABILITY(ios,introduced=7.0,deprecated=11.0);
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Adds a view to the end of the receiver’s list of subviews
/// and configures the constraints for the view.
/// This method establishes a strong reference to view
/// and sets its next responder to the receiver, which is its new superview.
/// Views can have only one superview. If <code>view</code> already has a superview and that view is not the receiver,
/// this method removes the previous superview before making the receiver its new superview.
/// \param view The view to be added. After being added,
/// this view appears on top of any other subviews.
///
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)addSubview:(UIView * _Nonnull)view make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Inserts a subview at the specified index and configures the constraints for the view.
/// This method establishes a strong reference to <code>view</code> and sets its next responder to the receiver,
/// which is its new superview.
/// Views can have only one superview. If <code>view</code> already has a superview and that view is not the receiver,
/// this method removes the previous superview before making the receiver its new superview.
/// \param view The view to insert.
///
/// \param index The index in the array of the <code>subviews</code> property at which to insert the view.
/// Subview indices start at <code>0</code> and cannot be greater than the number of subviews.
///
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)insertSubview:(UIView * _Nonnull)view at:(NSInteger)index make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Inserts a view above another view in the view hierarchy.
/// \param view The view to insert.
/// It’s removed from its superview if it’s not a sibling of <code>siblingSubview</code>.
///
/// \param other The sibling view that will be behind the inserted view.
///
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)insertSubview:(UIView * _Nonnull)view above:(UIView * _Nonnull)other make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Inserts a view below another view in the view hierarchy.
/// \param view The view to insert below another view.
/// It’s removed from its superview if it’s not a sibling of <code>siblingSubview</code>.
///
/// \param other The sibling view that will be above the inserted view.
///
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)insertSubview:(UIView * _Nonnull)view below:(UIView * _Nonnull)other make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Adds constraints in the view.
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoMake:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
/// Updates constraints in the view.
/// \param make The scope within which you can build up the constraints which you wish to apply to the view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoUpdate:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make SWIFT_DEPRECATED_MSG("", "autoUpdate(in:_:)");
/// Updates constraints in the view.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     constraints: The list constraints that should be updated.
///   </li>
///   <li>
///     make: The scope within which you can build up the constraints which you wish to apply to the view.
///   </li>
/// </ul>
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoUpdateWithConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make SWIFT_DEPRECATED_MSG("", "autoUpdate(in:_:)");
/// 专门给 Objective-C 调用的方法，请不要直接使用。
- (NSArray<NSLayoutConstraint *> * _Nonnull)_autoUpdateWithConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoRemakeWithConstraints:(NSArray<NSLayoutConstraint *> * _Nonnull)constraints make:(SWIFT_NOESCAPE void (^ _Nonnull)(AutoMaker * _Nonnull))make;
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the x-axis center match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterX SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the x-axis center and the superview.
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterX:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the x-axis center and the superview with the relationship.
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterX:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the y-axis center match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterY SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the superview.
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterY:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the superview with the relationship.
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterY:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the center match the superview.
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenter SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the superview.
/// \param offset The offset with the superview center.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenter:(CGPoint)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the superview.
/// \param x The offset with the superview x-axis center
///
/// \param y The offset with the superview y-axis center
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenterWithX:(CGFloat)x y:(CGFloat)y SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the x-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterXWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the x-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterXWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the x-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterXWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the y-axis center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterYWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterYWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the other view with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoCenterYWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the axis between views with the relationship.
/// \param axis The axis of self.
///
/// \param other The target view.
///
/// \param otherAxis The axis of target view.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAxis:(enum AutoAxis)axis to:(UIView * _Nullable)other axis:(enum AutoAxis)otherAxis offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the center match the other view.
///
/// returns:
/// A newly created constraint.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenterWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param offset The offset with the other view center.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenterWithMatch:(UIView * _Nonnull)other offset:(CGPoint)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset with the y-axis center and the other view.
/// \param other The target view.
///
/// \param x The offset with other the view x-axis center
///
/// \param y The offset with other the view y-axis center
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoCenterWithMatch:(UIView * _Nonnull)other x:(CGFloat)x y:(CGFloat)y SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Creates a constraint that defines the relationship between the specified edges.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoEdge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the left edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the left edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the right edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the top edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the bottom edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the leading edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing edge match the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the trailing edge and the specified edge of the other view.
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingTo:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the distance between the edge and the specified edge of the other view with the relationship.
/// \param edge The edge of self.
///
/// \param other The target view.
///
/// \param otherEdge The target edge.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeEdge:(enum AutoEdge)edge to:(UIView * _Nonnull)other edge:(enum AutoEdge)otherEdge offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the width match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidth SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the width to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidth:(CGFloat)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the width to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidth:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height match the superview.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeight SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeight:(CGFloat)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeight:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size match the superview.
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSize SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size to the specified value.
/// \param value The value of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSize:(CGSize)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size to the specified value with the relationship.
/// \param value The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSize:(CGSize)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size to the specified value.
/// \param width The required width.
///
/// \param height The required height.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSizeWithWidth:(CGFloat)width height:(CGFloat)height SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size to the specified value with the relationship.
/// \param width The required width.
///
/// \param height The required height.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSizeWithWidth:(CGFloat)width height:(CGFloat)height by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the width match with the other view.
/// \param other The target view.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidthWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the width of views.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidthWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the width of views with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoWidthWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height match with the other view.
/// \param other The target view.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeightWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the height of views.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeightWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the height of views with the relationship.
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoHeightWithMatch:(UIView * _Nonnull)other offset:(CGFloat)offset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the offset between the dimension of views with the relationship.
/// \param dimension The dimension of views.
///
/// \param other The target view.
///
/// \param offset The value of the constraint.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoDimension:(enum AutoDimension)dimension to:(UIView * _Nullable)other offset:(CGFloat)offset x:(CGFloat)multiplier by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size match with the other view.
/// \param other The target view.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSizeWithMatch:(UIView * _Nonnull)other SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the size match with the other view with the relationship.
/// \param other The target view.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSizeWithMatch:(UIView * _Nonnull)other by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the width equal to the height times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAspectRadioForWidth:(CGFloat)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the relationship between the width and the height times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAspectRadioForWidth:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the height equal to the width times the value.
/// \param value The value of aspect radio.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAspectRadioForHeight:(CGFloat)value SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the relationship between the height and the width times the value.
/// \param value The value of aspect radio.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoAspectRadioForHeight:(CGFloat)value by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the left inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeft SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeftWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRight SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeRightWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTop SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTopWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottom SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeBottomWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeading SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeLeadingWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to <code>0</code>.
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailing SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeTrailingWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Creates a constraint that defines the relationship between the specified edge.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// Newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoSafeEdge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset and the right inset with the superview.
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithHorizontal:(CGFloat)horizontal SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset and the bottom inset with the superview.
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithVertical:(CGFloat)vertical SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithHorizontal:(CGFloat)horizontal vertical:(CGFloat)vertical SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoSafeEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end


@interface UIView (SWIFT_EXTENSION(JiuFoundation))
/// Sets the left inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeft SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeftWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRight SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the right inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoRightWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTop SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTopWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottom SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the bottom inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoBottomWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeading SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the leading inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoLeadingWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to <code>0</code>.
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailing SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to inset.
/// \param inset The value of the inset.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingWithInset:(CGFloat)inset SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the trailing inset with the superview to inset, also set the relationship.
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoTrailingWithInset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Creates a constraint that defines the relationship between the specified edge.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoEdge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Creates a constraint that defines the relationship between the specified edge.
/// The linear equation for this relationship is shown below:
/// <code>view.edge = superview.edge × x + offset</code>.
/// \param edge The edge of self.
///
/// \param otherEdge The edge of super view.
///
/// \param inset The value of the inset.
///
/// \param multiplier The constant multiplied with the attribute on the superview of
/// the constraint as part of getting the modified attribute.
///
/// \param relation The relationship of the constraint.
///
///
/// returns:
/// A newly created constraint.
- (NSLayoutConstraint * _Nonnull)autoEdge:(enum AutoEdge)edge toSuper:(enum AutoEdge)otherEdge inset:(CGFloat)inset x:(CGFloat)multiplier by:(NSLayoutRelation)relation SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the left inset and the right inset with the superview.
/// \param horizontal The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithHorizontal:(CGFloat)horizontal SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets the top inset and the bottom inset with the superview.
/// \param vertical The value of the constraints.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithVertical:(CGFloat)vertical SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param horizontal The value of the left inset and the right inset.
///
/// \param vertical The value of the top inset and the bottom inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithHorizontal:(CGFloat)horizontal vertical:(CGFloat)vertical SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview without the specified edge.
/// \param top The value of the top inset.
///
/// \param left The value of the left inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param right The value of the right inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithTop:(CGFloat)top left:(CGFloat)left bottom:(CGFloat)bottom right:(CGFloat)right except:(enum AutoEdge)edge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
/// Sets all edge insets with the superview without the specified edges.
/// \param top The value of the top inset.
///
/// \param leading The value of the leading inset.
///
/// \param bottom The value of the bottom inset.
///
/// \param trailing The value of the trailing inset.
///
/// \param edge The edge should skip setting.
///
///
/// returns:
/// Newly created constraints.
- (NSArray<NSLayoutConstraint *> * _Nonnull)autoEdgesWithTop:(CGFloat)top leading:(CGFloat)leading bottom:(CGFloat)bottom trailing:(CGFloat)trailing except:(enum AutoEdge)edge SWIFT_DEPRECATED_MSG("use 'AutoMaker' instead.");
@end



SWIFT_CLASS("_TtC13JiuFoundation15Value1TableCell")
@interface Value1TableCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC13JiuFoundation15Value2TableCell")
@interface Value2TableCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
